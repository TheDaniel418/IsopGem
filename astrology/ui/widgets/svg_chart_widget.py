"""
Purpose: Provides a widget for displaying SVG charts.

This file is part of the astrology pillar and serves as a UI component.
It provides a widget for displaying SVG charts generated by kerykeion.

Key components:
- SVGChartWidget: Widget for displaying SVG charts

Dependencies:
- PyQt6: For UI components
- kerykeion: For generating SVG charts
"""

import os

from loguru import logger
from PyQt6.QtCore import QRectF, QSize, Qt
from PyQt6.QtGui import QPainter, QPaintEvent
from PyQt6.QtSvg import QSvgRenderer
from PyQt6.QtWidgets import QLabel, QVBoxLayout, QWidget

from astrology.models.chart import Chart
from astrology.services.kerykeion_service import KerykeionService


class SVGChartWidget(QWidget):
    """Widget for displaying SVG charts generated by kerykeion."""

    def __init__(self, parent=None):
        """Initialize the SVG chart widget.

        Args:
            parent: Parent widget
        """
        super().__init__(parent)

        # Chart data
        self.chart = None

        # SVG file path
        self.svg_path = None

        # Kerykeion service
        self.kerykeion_service = KerykeionService()

        # Initialize UI
        self._init_ui()

        logger.debug("SVGChartWidget initialized")

    def _init_ui(self):
        """Initialize the UI components."""
        # Main layout
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)

        # SVG renderer
        self.svg_renderer = QSvgRenderer()

        # Error label (hidden by default)
        self.error_label = QLabel("No chart data available")
        self.error_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.error_label.setStyleSheet("color: #666; font-style: italic;")
        self.error_label.setVisible(True)
        layout.addWidget(self.error_label)

    def set_chart(self, chart: Chart) -> None:
        """Set the chart to display.

        Args:
            chart: The chart to display
        """
        self.chart = chart

        if not chart:
            self.error_label.setVisible(True)
            self.update()  # Trigger a repaint
            return

        try:
            # Generate the SVG chart
            temp_dir = os.path.join(os.path.expanduser("~"), ".isopgem", "temp")
            os.makedirs(temp_dir, exist_ok=True)

            # Create a unique filename based on the chart name and time
            filename = f"{chart.name.replace(' ', '_')}_chart.svg"
            self.svg_path = os.path.join(temp_dir, filename)

            # Generate the SVG
            self.kerykeion_service.generate_chart_svg(chart, self.svg_path)

            # Check if the file was created
            if not os.path.exists(self.svg_path):
                # Try to find the file in the default location
                default_path = f"/home/daniel/{chart.name} - Natal Chart.svg"
                if os.path.exists(default_path):
                    # Move the file to our temp directory
                    os.rename(default_path, self.svg_path)

            # Load the SVG
            if os.path.exists(self.svg_path):
                self.svg_renderer.load(self.svg_path)
                self.error_label.setVisible(False)
                self.update()  # Trigger a repaint
                logger.debug(f"Loaded SVG chart from {self.svg_path}")
            else:
                raise FileNotFoundError(f"SVG file not found at {self.svg_path}")

        except Exception as e:
            logger.error(f"Error loading SVG chart: {e}")
            self.error_label.setText(f"Error loading chart: {str(e)}")
            self.error_label.setVisible(True)
            self.update()  # Trigger a repaint

    def sizeHint(self) -> QSize:
        """Get the suggested size for the widget.

        Returns:
            Suggested size
        """
        return QSize(600, 600)

    def minimumSizeHint(self) -> QSize:
        """Get the minimum suggested size for the widget.

        Returns:
            Minimum suggested size
        """
        return QSize(300, 300)

    def paintEvent(self, event: QPaintEvent):
        """Handle paint events.

        Args:
            event: Paint event
        """
        # Let the parent class handle the paint event
        super().paintEvent(event)

        # If we have a valid SVG renderer, draw the SVG
        if self.svg_renderer.isValid():
            painter = QPainter(self)
            painter.setRenderHint(QPainter.RenderHint.Antialiasing)
            painter.setRenderHint(QPainter.RenderHint.SmoothPixmapTransform)

            # Calculate the size to maintain aspect ratio
            view_box = self.svg_renderer.viewBox()
            aspect_ratio = view_box.width() / view_box.height()

            width = self.width()
            height = self.height()

            if width / height > aspect_ratio:
                # Width is relatively larger, so constrain by height
                new_width = height * aspect_ratio
                x = (width - new_width) / 2
                y = 0
                render_width = new_width
                render_height = height
            else:
                # Height is relatively larger, so constrain by width
                new_height = width / aspect_ratio
                x = 0
                y = (height - new_height) / 2
                render_width = width
                render_height = new_height

            # Render the SVG
            self.svg_renderer.render(painter, QRectF(x, y, render_width, render_height))
            painter.end()
